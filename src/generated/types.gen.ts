// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};

/**
 * Body_refresh_token_api_v1_auth_refresh_post
 */
export type BodyRefreshTokenApiV1AuthRefreshPost = {
    /**
     * Refresh Token
     */
    refresh_token: string;
};

/**
 * ClientCreate
 *
 * Schema for creating a new client.
 */
export type ClientCreate = {
    /**
     * Full Name
     */
    full_name: string;
    /**
     * Email
     */
    email: string;
    /**
     * Primary Phone
     */
    primary_phone: string;
    /**
     * Secondary Phone
     */
    secondary_phone?: string | null;
    /**
     * Delivery Address
     */
    delivery_address?: string | null;
    client_type: ClientType;
    /**
     * Notes
     */
    notes?: string | null;
};

/**
 * ClientPublic
 *
 * Public client response schema.
 */
export type ClientPublic = {
    /**
     * Id
     */
    id: number;
    /**
     * Full Name
     */
    full_name: string;
    /**
     * Email
     */
    email: string;
    /**
     * Primary Phone
     */
    primary_phone: string;
    /**
     * Secondary Phone
     */
    secondary_phone: string | null;
    /**
     * Delivery Address
     */
    delivery_address: string | null;
    client_type: ClientType;
    /**
     * Notes
     */
    notes: string | null;
    status: Status;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * ClientType
 *
 * Types of clients.
 */
export type ClientType = 'Individual' | 'Institutional';

/**
 * ClientUpdate
 *
 * Schema for updating an existing client (all fields optional).
 */
export type ClientUpdate = {
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Primary Phone
     */
    primary_phone?: string | null;
    /**
     * Secondary Phone
     */
    secondary_phone?: string | null;
    /**
     * Delivery Address
     */
    delivery_address?: string | null;
    client_type?: ClientType | null;
    /**
     * Notes
     */
    notes?: string | null;
    status?: Status | null;
};

/**
 * DashboardStats
 *
 * Schema for dashboard statistics.
 *
 * Provides aggregated metrics for the photography studio dashboard:
 * - Active sessions (not completed or canceled)
 * - Sessions created in the current month
 * - Total revenue from payments in the current month
 * - Pending balance across all active sessions
 * - Session counts grouped by status
 */
export type DashboardStats = {
    /**
     * Active Sessions Count
     *
     * Count of sessions not in COMPLETED or CANCELED status
     */
    active_sessions_count: number;
    /**
     * Sessions This Month
     *
     * Count of sessions created in the current month
     */
    sessions_this_month: number;
    /**
     * Total Revenue This Month
     *
     * Total payments (excluding refunds) received this month
     */
    total_revenue_this_month: string;
    /**
     * Pending Balance
     *
     * Sum of pending balances across all active sessions
     */
    pending_balance: string;
    /**
     * Sessions By Status
     *
     * Count of sessions grouped by status
     */
    sessions_by_status: Array<SessionsByStatus>;
};

/**
 * DeliveryMethod
 *
 * Methods of session delivery.
 */
export type DeliveryMethod = 'Digital' | 'Physical' | 'Both';

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * ItemCreate
 *
 * Schema for creating a new item.
 */
export type ItemCreate = {
    /**
     * Code
     */
    code: string;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    item_type: ItemType;
    /**
     * Unit Price
     */
    unit_price: number | string;
    /**
     * Unit Measure
     */
    unit_measure: string;
    /**
     * Default Quantity
     */
    default_quantity?: number | null;
};

/**
 * ItemPublic
 *
 * Public item response schema.
 */
export type ItemPublic = {
    /**
     * Id
     */
    id: number;
    /**
     * Code
     */
    code: string;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description: string | null;
    item_type: ItemType;
    /**
     * Unit Price
     */
    unit_price: string;
    /**
     * Unit Measure
     */
    unit_measure: string;
    /**
     * Default Quantity
     */
    default_quantity: number | null;
    status: Status;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * ItemType
 *
 * Types of catalog items.
 */
export type ItemType = 'Digital Photo' | 'Printed Photo' | 'Album' | 'Video' | 'Other';

/**
 * ItemUpdate
 *
 * Schema for updating an existing item (all fields optional).
 */
export type ItemUpdate = {
    /**
     * Code
     */
    code?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    item_type?: ItemType | null;
    /**
     * Unit Price
     */
    unit_price?: number | string | null;
    /**
     * Unit Measure
     */
    unit_measure?: string | null;
    /**
     * Default Quantity
     */
    default_quantity?: number | null;
    status?: Status | null;
};

/**
 * LineType
 *
 * Types of session detail line items.
 */
export type LineType = 'Item' | 'Package' | 'Adjustment';

/**
 * LogoutRequest
 *
 * Schema for logout request.
 */
export type LogoutRequest = {
    /**
     * Refresh Token
     *
     * Refresh token to revoke
     */
    refresh_token: string;
};

/**
 * PackageCreate
 *
 * Schema for creating a new package.
 */
export type PackageCreate = {
    /**
     * Code
     */
    code: string;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    session_type: SessionType;
    /**
     * Base Price
     */
    base_price: number | string;
    /**
     * Estimated Editing Days
     */
    estimated_editing_days: number;
};

/**
 * PackageDetail
 *
 * Package with included items.
 */
export type PackageDetail = {
    /**
     * Id
     */
    id: number;
    /**
     * Code
     */
    code: string;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description: string | null;
    session_type: SessionType;
    /**
     * Base Price
     */
    base_price: string;
    /**
     * Estimated Editing Days
     */
    estimated_editing_days: number;
    status: Status;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Items
     */
    items?: Array<PackageItemDetail>;
};

/**
 * PackageItemCreate
 *
 * Schema for adding an item to a package.
 */
export type PackageItemCreate = {
    /**
     * Item Id
     */
    item_id: number;
    /**
     * Quantity
     */
    quantity?: number;
    /**
     * Display Order
     */
    display_order?: number | null;
};

/**
 * PackageItemDetail
 *
 * Item detail within a package (for PackageDetail response).
 */
export type PackageItemDetail = {
    /**
     * Item Id
     */
    item_id: number;
    /**
     * Item Code
     */
    item_code: string;
    /**
     * Item Name
     */
    item_name: string;
    /**
     * Quantity
     */
    quantity: number;
    /**
     * Display Order
     */
    display_order: number | null;
};

/**
 * PackagePublic
 *
 * Public package response schema.
 */
export type PackagePublic = {
    /**
     * Id
     */
    id: number;
    /**
     * Code
     */
    code: string;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description: string | null;
    session_type: SessionType;
    /**
     * Base Price
     */
    base_price: string;
    /**
     * Estimated Editing Days
     */
    estimated_editing_days: number;
    status: Status;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * PackageUpdate
 *
 * Schema for updating an existing package (all fields optional).
 */
export type PackageUpdate = {
    /**
     * Code
     */
    code?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    session_type?: SessionType | null;
    /**
     * Base Price
     */
    base_price?: number | string | null;
    /**
     * Estimated Editing Days
     */
    estimated_editing_days?: number | null;
    status?: Status | null;
};

/**
 * PaginatedResponse[ClientPublic]
 */
export type PaginatedResponseClientPublic = {
    /**
     * Items
     *
     * List of items for the current page
     */
    items: Array<ClientPublic>;
    /**
     * Total
     *
     * Total number of items across all pages
     */
    total: number;
    /**
     * Limit
     *
     * Maximum number of items per page
     */
    limit: number;
    /**
     * Offset
     *
     * Number of items skipped (page offset)
     */
    offset: number;
    /**
     * Has More
     *
     * Whether there are more items beyond the current page
     */
    has_more: boolean;
};

/**
 * PaginatedResponse[ItemPublic]
 */
export type PaginatedResponseItemPublic = {
    /**
     * Items
     *
     * List of items for the current page
     */
    items: Array<ItemPublic>;
    /**
     * Total
     *
     * Total number of items across all pages
     */
    total: number;
    /**
     * Limit
     *
     * Maximum number of items per page
     */
    limit: number;
    /**
     * Offset
     *
     * Number of items skipped (page offset)
     */
    offset: number;
    /**
     * Has More
     *
     * Whether there are more items beyond the current page
     */
    has_more: boolean;
};

/**
 * PaginatedResponse[PackagePublic]
 */
export type PaginatedResponsePackagePublic = {
    /**
     * Items
     *
     * List of items for the current page
     */
    items: Array<PackagePublic>;
    /**
     * Total
     *
     * Total number of items across all pages
     */
    total: number;
    /**
     * Limit
     *
     * Maximum number of items per page
     */
    limit: number;
    /**
     * Offset
     *
     * Number of items skipped (page offset)
     */
    offset: number;
    /**
     * Has More
     *
     * Whether there are more items beyond the current page
     */
    has_more: boolean;
};

/**
 * PaginatedResponse[PermissionPublic]
 */
export type PaginatedResponsePermissionPublic = {
    /**
     * Items
     *
     * List of items for the current page
     */
    items: Array<PermissionPublic>;
    /**
     * Total
     *
     * Total number of items across all pages
     */
    total: number;
    /**
     * Limit
     *
     * Maximum number of items per page
     */
    limit: number;
    /**
     * Offset
     *
     * Number of items skipped (page offset)
     */
    offset: number;
    /**
     * Has More
     *
     * Whether there are more items beyond the current page
     */
    has_more: boolean;
};

/**
 * PaginatedResponse[RolePublic]
 */
export type PaginatedResponseRolePublic = {
    /**
     * Items
     *
     * List of items for the current page
     */
    items: Array<RolePublic>;
    /**
     * Total
     *
     * Total number of items across all pages
     */
    total: number;
    /**
     * Limit
     *
     * Maximum number of items per page
     */
    limit: number;
    /**
     * Offset
     *
     * Number of items skipped (page offset)
     */
    offset: number;
    /**
     * Has More
     *
     * Whether there are more items beyond the current page
     */
    has_more: boolean;
};

/**
 * PaginatedResponse[RoomPublic]
 */
export type PaginatedResponseRoomPublic = {
    /**
     * Items
     *
     * List of items for the current page
     */
    items: Array<RoomPublic>;
    /**
     * Total
     *
     * Total number of items across all pages
     */
    total: number;
    /**
     * Limit
     *
     * Maximum number of items per page
     */
    limit: number;
    /**
     * Offset
     *
     * Number of items skipped (page offset)
     */
    offset: number;
    /**
     * Has More
     *
     * Whether there are more items beyond the current page
     */
    has_more: boolean;
};

/**
 * PaginatedResponse[SessionPublic]
 */
export type PaginatedResponseSessionPublic = {
    /**
     * Items
     *
     * List of items for the current page
     */
    items: Array<SessionPublic>;
    /**
     * Total
     *
     * Total number of items across all pages
     */
    total: number;
    /**
     * Limit
     *
     * Maximum number of items per page
     */
    limit: number;
    /**
     * Offset
     *
     * Number of items skipped (page offset)
     */
    offset: number;
    /**
     * Has More
     *
     * Whether there are more items beyond the current page
     */
    has_more: boolean;
};

/**
 * PaginatedResponse[UserPublic]
 */
export type PaginatedResponseUserPublic = {
    /**
     * Items
     *
     * List of items for the current page
     */
    items: Array<UserPublic>;
    /**
     * Total
     *
     * Total number of items across all pages
     */
    total: number;
    /**
     * Limit
     *
     * Maximum number of items per page
     */
    limit: number;
    /**
     * Offset
     *
     * Number of items skipped (page offset)
     */
    offset: number;
    /**
     * Has More
     *
     * Whether there are more items beyond the current page
     */
    has_more: boolean;
};

/**
 * PaymentType
 *
 * Types of session payments.
 */
export type PaymentType = 'Deposit' | 'Balance' | 'Partial' | 'Refund';

/**
 * PermissionCreate
 *
 * Schema for creating a new permission.
 */
export type PermissionCreate = {
    /**
     * Code
     */
    code: string;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Module
     */
    module: string;
};

/**
 * PermissionPublic
 *
 * Public permission response schema.
 */
export type PermissionPublic = {
    /**
     * Id
     */
    id: number;
    /**
     * Code
     */
    code: string;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description: string | null;
    /**
     * Module
     */
    module: string;
    status: Status;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * PhotographerRole
 *
 * Roles for photographer assignments.
 */
export type PhotographerRole = 'Lead' | 'Assistant';

/**
 * ReferenceType
 *
 * Reference types for session detail line items.
 */
export type ReferenceType = 'Item' | 'Package';

/**
 * RoleCreate
 *
 * Schema for creating a new role.
 */
export type RoleCreate = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * RolePublic
 *
 * Public role response schema.
 */
export type RolePublic = {
    /**
     * Id
     */
    id: number;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description: string | null;
    status: Status;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * RoleUpdate
 *
 * Schema for updating an existing role (all fields optional).
 */
export type RoleUpdate = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    status?: Status | null;
};

/**
 * RoleWithPermissions
 *
 * Role with associated permissions.
 */
export type RoleWithPermissions = {
    /**
     * Id
     */
    id: number;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description: string | null;
    status: Status;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Permissions
     */
    permissions?: Array<PermissionPublic>;
};

/**
 * RoomCreate
 *
 * Schema for creating a new room.
 */
export type RoomCreate = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Capacity
     */
    capacity?: number | null;
    /**
     * Hourly Rate
     */
    hourly_rate?: number | string | null;
};

/**
 * RoomPublic
 *
 * Public room response schema.
 */
export type RoomPublic = {
    /**
     * Id
     */
    id: number;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description: string | null;
    /**
     * Capacity
     */
    capacity: number | null;
    /**
     * Hourly Rate
     */
    hourly_rate: string | null;
    status: Status;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * RoomUpdate
 *
 * Schema for updating an existing room (all fields optional).
 */
export type RoomUpdate = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Capacity
     */
    capacity?: number | null;
    /**
     * Hourly Rate
     */
    hourly_rate?: number | string | null;
    status?: Status | null;
};

/**
 * SessionCancellation
 *
 * Schema for canceling a session.
 */
export type SessionCancellation = {
    /**
     * Cancellation Reason
     */
    cancellation_reason: string;
    /**
     * Initiated By
     */
    initiated_by: string;
    /**
     * Notes
     */
    notes?: string | null;
};

/**
 * SessionCreate
 *
 * Schema for creating a new session.
 */
export type SessionCreate = {
    /**
     * Client Id
     */
    client_id: number;
    session_type: SessionType;
    /**
     * Session Date
     */
    session_date: string;
    /**
     * Session Time
     */
    session_time?: string | null;
    /**
     * Estimated Duration Hours
     */
    estimated_duration_hours?: number | null;
    /**
     * Location
     */
    location?: string | null;
    /**
     * Room Id
     */
    room_id?: number | null;
    /**
     * Client Requirements
     */
    client_requirements?: string | null;
};

/**
 * SessionDetail
 *
 * Detailed session response with additional fields.
 */
export type SessionDetail = {
    /**
     * Id
     */
    id: number;
    /**
     * Client Id
     */
    client_id: number;
    session_type: SessionType;
    /**
     * Session Date
     */
    session_date: string;
    /**
     * Session Time
     */
    session_time: string | null;
    /**
     * Estimated Duration Hours
     */
    estimated_duration_hours: number | null;
    /**
     * Location
     */
    location: string | null;
    /**
     * Room Id
     */
    room_id: number | null;
    status: SessionStatus;
    /**
     * Total Amount
     */
    total_amount: string;
    /**
     * Deposit Amount
     */
    deposit_amount: string;
    /**
     * Balance Amount
     */
    balance_amount: string;
    /**
     * Paid Amount
     */
    paid_amount: string;
    /**
     * Payment Deadline
     */
    payment_deadline: string | null;
    /**
     * Changes Deadline
     */
    changes_deadline: string | null;
    /**
     * Delivery Deadline
     */
    delivery_deadline: string | null;
    /**
     * Client Requirements
     */
    client_requirements: string | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Editing Assigned To
     */
    editing_assigned_to: number | null;
    /**
     * Editing Started At
     */
    editing_started_at: string | null;
    /**
     * Editing Completed At
     */
    editing_completed_at: string | null;
    delivery_method: DeliveryMethod | null;
    /**
     * Delivery Address
     */
    delivery_address: string | null;
    /**
     * Delivered At
     */
    delivered_at: string | null;
    /**
     * Internal Notes
     */
    internal_notes: string | null;
    /**
     * Cancellation Reason
     */
    cancellation_reason: string | null;
    /**
     * Cancelled At
     */
    cancelled_at: string | null;
    /**
     * Cancelled By
     */
    cancelled_by: number | null;
};

/**
 * SessionDetailPublic
 *
 * Public session detail response schema.
 */
export type SessionDetailPublic = {
    /**
     * Id
     */
    id: number;
    /**
     * Session Id
     */
    session_id: number;
    line_type: LineType;
    /**
     * Reference Id
     */
    reference_id: number | null;
    reference_type: ReferenceType | null;
    /**
     * Item Code
     */
    item_code: string;
    /**
     * Item Name
     */
    item_name: string;
    /**
     * Item Description
     */
    item_description: string | null;
    /**
     * Quantity
     */
    quantity: number;
    /**
     * Unit Price
     */
    unit_price: string;
    /**
     * Line Subtotal
     */
    line_subtotal: string;
    /**
     * Is Delivered
     */
    is_delivered: boolean;
    /**
     * Delivered At
     */
    delivered_at: string | null;
    /**
     * Created At
     */
    created_at: string;
};

/**
 * SessionEditorAssignment
 *
 * Schema for assigning an editor to a session.
 */
export type SessionEditorAssignment = {
    /**
     * Editor Id
     */
    editor_id: number;
};

/**
 * SessionMarkReady
 *
 * Schema for marking session as ready for delivery (editor completed).
 */
export type SessionMarkReady = {
    /**
     * Notes
     */
    notes?: string | null;
};

/**
 * SessionPaymentCreate
 *
 * Schema for creating a session payment.
 */
export type SessionPaymentCreate = {
    /**
     * Session Id
     */
    session_id: number;
    payment_type: PaymentType;
    /**
     * Payment Method
     */
    payment_method: string;
    /**
     * Amount
     */
    amount: number | string;
    /**
     * Transaction Reference
     */
    transaction_reference?: string | null;
    /**
     * Payment Date
     */
    payment_date: string;
    /**
     * Notes
     */
    notes?: string | null;
};

/**
 * SessionPaymentPublic
 *
 * Public session payment response schema.
 */
export type SessionPaymentPublic = {
    /**
     * Id
     */
    id: number;
    /**
     * Session Id
     */
    session_id: number;
    payment_type: PaymentType;
    /**
     * Payment Method
     */
    payment_method: string;
    /**
     * Amount
     */
    amount: string;
    /**
     * Transaction Reference
     */
    transaction_reference: string | null;
    /**
     * Payment Date
     */
    payment_date: string;
    /**
     * Notes
     */
    notes: string | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Created By
     */
    created_by: number;
};

/**
 * SessionPhotographerAssign
 *
 * Schema for assigning a photographer to a session.
 */
export type SessionPhotographerAssign = {
    /**
     * Session Id
     */
    session_id: number;
    /**
     * Photographer Id
     */
    photographer_id: number;
    role?: PhotographerRole | null;
};

/**
 * SessionPhotographerPublic
 *
 * Public session photographer response schema.
 */
export type SessionPhotographerPublic = {
    /**
     * Id
     */
    id: number;
    /**
     * Session Id
     */
    session_id: number;
    /**
     * Photographer Id
     */
    photographer_id: number;
    role: PhotographerRole | null;
    /**
     * Assigned At
     */
    assigned_at: string;
    /**
     * Assigned By
     */
    assigned_by: number;
    /**
     * Attended
     */
    attended: boolean;
    /**
     * Attended At
     */
    attended_at: string | null;
    /**
     * Notes
     */
    notes: string | null;
};

/**
 * SessionPhotographerUpdate
 *
 * Schema for updating photographer assignment.
 */
export type SessionPhotographerUpdate = {
    /**
     * Attended
     */
    attended: boolean;
    /**
     * Notes
     */
    notes?: string | null;
};

/**
 * SessionPublic
 *
 * Public session response schema.
 */
export type SessionPublic = {
    /**
     * Id
     */
    id: number;
    /**
     * Client Id
     */
    client_id: number;
    session_type: SessionType;
    /**
     * Session Date
     */
    session_date: string;
    /**
     * Session Time
     */
    session_time: string | null;
    /**
     * Estimated Duration Hours
     */
    estimated_duration_hours: number | null;
    /**
     * Location
     */
    location: string | null;
    /**
     * Room Id
     */
    room_id: number | null;
    status: SessionStatus;
    /**
     * Total Amount
     */
    total_amount: string;
    /**
     * Deposit Amount
     */
    deposit_amount: string;
    /**
     * Balance Amount
     */
    balance_amount: string;
    /**
     * Paid Amount
     */
    paid_amount: string;
    /**
     * Payment Deadline
     */
    payment_deadline: string | null;
    /**
     * Changes Deadline
     */
    changes_deadline: string | null;
    /**
     * Delivery Deadline
     */
    delivery_deadline: string | null;
    /**
     * Client Requirements
     */
    client_requirements: string | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * SessionStatus
 *
 * Session state machine statuses.
 *
 * See files/business_rules_doc.md for complete state machine rules.
 */
export type SessionStatus = 'Request' | 'Negotiation' | 'Pre-scheduled' | 'Confirmed' | 'Assigned' | 'Attended' | 'In Editing' | 'Ready for Delivery' | 'Completed' | 'Canceled';

/**
 * SessionStatusHistoryPublic
 *
 * Public session status history response schema.
 */
export type SessionStatusHistoryPublic = {
    /**
     * Id
     */
    id: number;
    /**
     * Session Id
     */
    session_id: number;
    /**
     * From Status
     */
    from_status: string | null;
    /**
     * To Status
     */
    to_status: string;
    /**
     * Reason
     */
    reason: string | null;
    /**
     * Notes
     */
    notes: string | null;
    /**
     * Changed At
     */
    changed_at: string;
    /**
     * Changed By
     */
    changed_by: number;
};

/**
 * SessionStatusTransition
 *
 * Schema for transitioning session status.
 */
export type SessionStatusTransition = {
    /**
     * To Status
     */
    to_status: string;
    /**
     * Reason
     */
    reason?: string | null;
    /**
     * Notes
     */
    notes?: string | null;
};

/**
 * SessionType
 *
 * Types of photography sessions.
 */
export type SessionType = 'Studio' | 'External' | 'Both';

/**
 * SessionUpdate
 *
 * Schema for updating an existing session (all fields optional).
 */
export type SessionUpdate = {
    /**
     * Session Date
     */
    session_date?: string | null;
    /**
     * Session Time
     */
    session_time?: string | null;
    /**
     * Estimated Duration Hours
     */
    estimated_duration_hours?: number | null;
    /**
     * Location
     */
    location?: string | null;
    /**
     * Room Id
     */
    room_id?: number | null;
    /**
     * Client Requirements
     */
    client_requirements?: string | null;
    /**
     * Internal Notes
     */
    internal_notes?: string | null;
    delivery_method?: DeliveryMethod | null;
    /**
     * Delivery Address
     */
    delivery_address?: string | null;
};

/**
 * SessionsByStatus
 *
 * Schema for sessions count grouped by status.
 */
export type SessionsByStatus = {
    status: SessionStatus;
    /**
     * Count
     */
    count: number;
};

/**
 * Status
 *
 * General status for entities (User, Role, Permission, Client, Item, Package, Room).
 */
export type Status = 'Active' | 'Inactive' | 'Maintenance';

/**
 * TokenResponse
 *
 * Response schema for successful authentication.
 */
export type TokenResponse = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Refresh Token
     */
    refresh_token: string;
    /**
     * Token Type
     */
    token_type?: string;
    /**
     * Expires In
     */
    expires_in: number;
    user: UserPublic;
};

/**
 * UserCreate
 *
 * Schema for creating a new user.
 *
 * The password field uses the Password value object which automatically
 * validates password strength. No manual validation is needed.
 */
export type UserCreate = {
    /**
     * Full Name
     */
    full_name: string;
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
    /**
     * Phone
     */
    phone?: string | null;
};

/**
 * UserLogin
 *
 * Schema for user login.
 */
export type UserLogin = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
};

/**
 * UserPasswordUpdate
 *
 * Schema for updating user password.
 *
 * The new_password field uses the Password value object which automatically
 * validates password strength. No manual validation is needed.
 */
export type UserPasswordUpdate = {
    /**
     * Current Password
     */
    current_password: string;
    /**
     * New Password
     */
    new_password: string;
};

/**
 * UserPublic
 *
 * Public user response schema (without password_hash).
 */
export type UserPublic = {
    /**
     * Id
     */
    id: number;
    /**
     * Full Name
     */
    full_name: string;
    /**
     * Email
     */
    email: string;
    /**
     * Phone
     */
    phone: string | null;
    status: Status;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * UserUpdate
 *
 * Schema for updating an existing user (all fields optional).
 */
export type UserUpdate = {
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Phone
     */
    phone?: string | null;
    status?: Status | null;
};

/**
 * UserWithRoles
 *
 * User with associated roles.
 */
export type UserWithRoles = {
    /**
     * Id
     */
    id: number;
    /**
     * Full Name
     */
    full_name: string;
    /**
     * Email
     */
    email: string;
    /**
     * Phone
     */
    phone: string | null;
    status: Status;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Roles
     */
    roles?: Array<RolePublic>;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type HealthCheckHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthCheckHealthGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetBusinessRulesApiV1ConfigBusinessRulesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/config/business-rules';
};

export type GetBusinessRulesApiV1ConfigBusinessRulesGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetEnumsApiV1EnumsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/enums';
};

export type GetEnumsApiV1EnumsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type LoginApiV1AuthLoginPostData = {
    body: UserLogin;
    path?: never;
    query?: never;
    url: '/api/v1/auth/login';
};

export type LoginApiV1AuthLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginApiV1AuthLoginPostError = LoginApiV1AuthLoginPostErrors[keyof LoginApiV1AuthLoginPostErrors];

export type LoginApiV1AuthLoginPostResponses = {
    /**
     * Successful Response
     */
    200: TokenResponse;
};

export type LoginApiV1AuthLoginPostResponse = LoginApiV1AuthLoginPostResponses[keyof LoginApiV1AuthLoginPostResponses];

export type RefreshTokenApiV1AuthRefreshPostData = {
    body: BodyRefreshTokenApiV1AuthRefreshPost;
    path?: never;
    query?: never;
    url: '/api/v1/auth/refresh';
};

export type RefreshTokenApiV1AuthRefreshPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RefreshTokenApiV1AuthRefreshPostError = RefreshTokenApiV1AuthRefreshPostErrors[keyof RefreshTokenApiV1AuthRefreshPostErrors];

export type RefreshTokenApiV1AuthRefreshPostResponses = {
    /**
     * Successful Response
     */
    200: TokenResponse;
};

export type RefreshTokenApiV1AuthRefreshPostResponse = RefreshTokenApiV1AuthRefreshPostResponses[keyof RefreshTokenApiV1AuthRefreshPostResponses];

export type LogoutApiV1AuthLogoutPostData = {
    body: LogoutRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/logout';
};

export type LogoutApiV1AuthLogoutPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LogoutApiV1AuthLogoutPostError = LogoutApiV1AuthLogoutPostErrors[keyof LogoutApiV1AuthLogoutPostErrors];

export type LogoutApiV1AuthLogoutPostResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type LogoutApiV1AuthLogoutPostResponse = LogoutApiV1AuthLogoutPostResponses[keyof LogoutApiV1AuthLogoutPostResponses];

export type RegisterUserApiV1AuthRegisterPostData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/api/v1/auth/register';
};

export type RegisterUserApiV1AuthRegisterPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterUserApiV1AuthRegisterPostError = RegisterUserApiV1AuthRegisterPostErrors[keyof RegisterUserApiV1AuthRegisterPostErrors];

export type RegisterUserApiV1AuthRegisterPostResponses = {
    /**
     * Successful Response
     */
    201: UserPublic;
};

export type RegisterUserApiV1AuthRegisterPostResponse = RegisterUserApiV1AuthRegisterPostResponses[keyof RegisterUserApiV1AuthRegisterPostResponses];

export type ListUsersApiV1UsersGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Active Only
         *
         * Filter for active users only
         */
        active_only?: boolean;
        /**
         * Limit
         *
         * Maximum number of results
         */
        limit?: number;
        /**
         * Offset
         *
         * Number of results to skip
         */
        offset?: number;
    };
    url: '/api/v1/users';
};

export type ListUsersApiV1UsersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListUsersApiV1UsersGetError = ListUsersApiV1UsersGetErrors[keyof ListUsersApiV1UsersGetErrors];

export type ListUsersApiV1UsersGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedResponseUserPublic;
};

export type ListUsersApiV1UsersGetResponse = ListUsersApiV1UsersGetResponses[keyof ListUsersApiV1UsersGetResponses];

export type CreateUserApiV1UsersPostData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/api/v1/users';
};

export type CreateUserApiV1UsersPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateUserApiV1UsersPostError = CreateUserApiV1UsersPostErrors[keyof CreateUserApiV1UsersPostErrors];

export type CreateUserApiV1UsersPostResponses = {
    /**
     * Successful Response
     */
    201: UserPublic;
};

export type CreateUserApiV1UsersPostResponse = CreateUserApiV1UsersPostResponses[keyof CreateUserApiV1UsersPostResponses];

export type GetCurrentUserInfoApiV1UsersMeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type GetCurrentUserInfoApiV1UsersMeGetResponses = {
    /**
     * Successful Response
     */
    200: UserWithRoles;
};

export type GetCurrentUserInfoApiV1UsersMeGetResponse = GetCurrentUserInfoApiV1UsersMeGetResponses[keyof GetCurrentUserInfoApiV1UsersMeGetResponses];

export type GetCurrentUserPermissionsApiV1UsersMePermissionsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me/permissions';
};

export type GetCurrentUserPermissionsApiV1UsersMePermissionsGetResponses = {
    /**
     * Response Get Current User Permissions Api V1 Users Me Permissions Get
     *
     * Successful Response
     */
    200: Array<string>;
};

export type GetCurrentUserPermissionsApiV1UsersMePermissionsGetResponse = GetCurrentUserPermissionsApiV1UsersMePermissionsGetResponses[keyof GetCurrentUserPermissionsApiV1UsersMePermissionsGetResponses];

export type DeactivateUserApiV1UsersUserIdDeleteData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type DeactivateUserApiV1UsersUserIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeactivateUserApiV1UsersUserIdDeleteError = DeactivateUserApiV1UsersUserIdDeleteErrors[keyof DeactivateUserApiV1UsersUserIdDeleteErrors];

export type DeactivateUserApiV1UsersUserIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type DeactivateUserApiV1UsersUserIdDeleteResponse = DeactivateUserApiV1UsersUserIdDeleteResponses[keyof DeactivateUserApiV1UsersUserIdDeleteResponses];

export type GetUserApiV1UsersUserIdGetData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type GetUserApiV1UsersUserIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserApiV1UsersUserIdGetError = GetUserApiV1UsersUserIdGetErrors[keyof GetUserApiV1UsersUserIdGetErrors];

export type GetUserApiV1UsersUserIdGetResponses = {
    /**
     * Successful Response
     */
    200: UserWithRoles;
};

export type GetUserApiV1UsersUserIdGetResponse = GetUserApiV1UsersUserIdGetResponses[keyof GetUserApiV1UsersUserIdGetResponses];

export type UpdateUserApiV1UsersUserIdPatchData = {
    body: UserUpdate;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type UpdateUserApiV1UsersUserIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateUserApiV1UsersUserIdPatchError = UpdateUserApiV1UsersUserIdPatchErrors[keyof UpdateUserApiV1UsersUserIdPatchErrors];

export type UpdateUserApiV1UsersUserIdPatchResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UpdateUserApiV1UsersUserIdPatchResponse = UpdateUserApiV1UsersUserIdPatchResponses[keyof UpdateUserApiV1UsersUserIdPatchResponses];

export type ReactivateUserApiV1UsersUserIdReactivatePutData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/api/v1/users/{user_id}/reactivate';
};

export type ReactivateUserApiV1UsersUserIdReactivatePutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReactivateUserApiV1UsersUserIdReactivatePutError = ReactivateUserApiV1UsersUserIdReactivatePutErrors[keyof ReactivateUserApiV1UsersUserIdReactivatePutErrors];

export type ReactivateUserApiV1UsersUserIdReactivatePutResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type ReactivateUserApiV1UsersUserIdReactivatePutResponse = ReactivateUserApiV1UsersUserIdReactivatePutResponses[keyof ReactivateUserApiV1UsersUserIdReactivatePutResponses];

export type ChangePasswordApiV1UsersUserIdPasswordPatchData = {
    body: UserPasswordUpdate;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/api/v1/users/{user_id}/password';
};

export type ChangePasswordApiV1UsersUserIdPasswordPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ChangePasswordApiV1UsersUserIdPasswordPatchError = ChangePasswordApiV1UsersUserIdPasswordPatchErrors[keyof ChangePasswordApiV1UsersUserIdPasswordPatchErrors];

export type ChangePasswordApiV1UsersUserIdPasswordPatchResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type ChangePasswordApiV1UsersUserIdPasswordPatchResponse = ChangePasswordApiV1UsersUserIdPasswordPatchResponses[keyof ChangePasswordApiV1UsersUserIdPasswordPatchResponses];

export type ListUserRolesApiV1UsersUserIdRolesGetData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/api/v1/users/{user_id}/roles';
};

export type ListUserRolesApiV1UsersUserIdRolesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListUserRolesApiV1UsersUserIdRolesGetError = ListUserRolesApiV1UsersUserIdRolesGetErrors[keyof ListUserRolesApiV1UsersUserIdRolesGetErrors];

export type ListUserRolesApiV1UsersUserIdRolesGetResponses = {
    /**
     * Response List User Roles Api V1 Users  User Id  Roles Get
     *
     * Successful Response
     */
    200: Array<RolePublic>;
};

export type ListUserRolesApiV1UsersUserIdRolesGetResponse = ListUserRolesApiV1UsersUserIdRolesGetResponses[keyof ListUserRolesApiV1UsersUserIdRolesGetResponses];

export type RemoveRoleApiV1UsersUserIdRolesRoleIdDeleteData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
        /**
         * Role Id
         */
        role_id: number;
    };
    query?: never;
    url: '/api/v1/users/{user_id}/roles/{role_id}';
};

export type RemoveRoleApiV1UsersUserIdRolesRoleIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveRoleApiV1UsersUserIdRolesRoleIdDeleteError = RemoveRoleApiV1UsersUserIdRolesRoleIdDeleteErrors[keyof RemoveRoleApiV1UsersUserIdRolesRoleIdDeleteErrors];

export type RemoveRoleApiV1UsersUserIdRolesRoleIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: UserWithRoles;
};

export type RemoveRoleApiV1UsersUserIdRolesRoleIdDeleteResponse = RemoveRoleApiV1UsersUserIdRolesRoleIdDeleteResponses[keyof RemoveRoleApiV1UsersUserIdRolesRoleIdDeleteResponses];

export type AssignRoleApiV1UsersUserIdRolesRoleIdPostData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
        /**
         * Role Id
         */
        role_id: number;
    };
    query?: never;
    url: '/api/v1/users/{user_id}/roles/{role_id}';
};

export type AssignRoleApiV1UsersUserIdRolesRoleIdPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AssignRoleApiV1UsersUserIdRolesRoleIdPostError = AssignRoleApiV1UsersUserIdRolesRoleIdPostErrors[keyof AssignRoleApiV1UsersUserIdRolesRoleIdPostErrors];

export type AssignRoleApiV1UsersUserIdRolesRoleIdPostResponses = {
    /**
     * Successful Response
     */
    200: UserWithRoles;
};

export type AssignRoleApiV1UsersUserIdRolesRoleIdPostResponse = AssignRoleApiV1UsersUserIdRolesRoleIdPostResponses[keyof AssignRoleApiV1UsersUserIdRolesRoleIdPostResponses];

export type ListRolesApiV1RolesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Active Only
         *
         * Filter for active roles only
         */
        active_only?: boolean;
        /**
         * Limit
         *
         * Maximum number of results
         */
        limit?: number;
        /**
         * Offset
         *
         * Number of results to skip
         */
        offset?: number;
    };
    url: '/api/v1/roles';
};

export type ListRolesApiV1RolesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListRolesApiV1RolesGetError = ListRolesApiV1RolesGetErrors[keyof ListRolesApiV1RolesGetErrors];

export type ListRolesApiV1RolesGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedResponseRolePublic;
};

export type ListRolesApiV1RolesGetResponse = ListRolesApiV1RolesGetResponses[keyof ListRolesApiV1RolesGetResponses];

export type CreateRoleApiV1RolesPostData = {
    body: RoleCreate;
    path?: never;
    query?: never;
    url: '/api/v1/roles';
};

export type CreateRoleApiV1RolesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateRoleApiV1RolesPostError = CreateRoleApiV1RolesPostErrors[keyof CreateRoleApiV1RolesPostErrors];

export type CreateRoleApiV1RolesPostResponses = {
    /**
     * Successful Response
     */
    201: RolePublic;
};

export type CreateRoleApiV1RolesPostResponse = CreateRoleApiV1RolesPostResponses[keyof CreateRoleApiV1RolesPostResponses];

export type GetRoleApiV1RolesRoleIdGetData = {
    body?: never;
    path: {
        /**
         * Role Id
         */
        role_id: number;
    };
    query?: never;
    url: '/api/v1/roles/{role_id}';
};

export type GetRoleApiV1RolesRoleIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetRoleApiV1RolesRoleIdGetError = GetRoleApiV1RolesRoleIdGetErrors[keyof GetRoleApiV1RolesRoleIdGetErrors];

export type GetRoleApiV1RolesRoleIdGetResponses = {
    /**
     * Successful Response
     */
    200: RoleWithPermissions;
};

export type GetRoleApiV1RolesRoleIdGetResponse = GetRoleApiV1RolesRoleIdGetResponses[keyof GetRoleApiV1RolesRoleIdGetResponses];

export type UpdateRoleApiV1RolesRoleIdPatchData = {
    body: RoleUpdate;
    path: {
        /**
         * Role Id
         */
        role_id: number;
    };
    query?: never;
    url: '/api/v1/roles/{role_id}';
};

export type UpdateRoleApiV1RolesRoleIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateRoleApiV1RolesRoleIdPatchError = UpdateRoleApiV1RolesRoleIdPatchErrors[keyof UpdateRoleApiV1RolesRoleIdPatchErrors];

export type UpdateRoleApiV1RolesRoleIdPatchResponses = {
    /**
     * Successful Response
     */
    200: RolePublic;
};

export type UpdateRoleApiV1RolesRoleIdPatchResponse = UpdateRoleApiV1RolesRoleIdPatchResponses[keyof UpdateRoleApiV1RolesRoleIdPatchResponses];

export type ListPermissionsApiV1PermissionsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Module
         *
         * Filter by module
         */
        module?: string | null;
        /**
         * Active Only
         *
         * Filter for active permissions only
         */
        active_only?: boolean;
        /**
         * Limit
         *
         * Maximum number of results
         */
        limit?: number;
        /**
         * Offset
         *
         * Number of results to skip
         */
        offset?: number;
    };
    url: '/api/v1/permissions';
};

export type ListPermissionsApiV1PermissionsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListPermissionsApiV1PermissionsGetError = ListPermissionsApiV1PermissionsGetErrors[keyof ListPermissionsApiV1PermissionsGetErrors];

export type ListPermissionsApiV1PermissionsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedResponsePermissionPublic;
};

export type ListPermissionsApiV1PermissionsGetResponse = ListPermissionsApiV1PermissionsGetResponses[keyof ListPermissionsApiV1PermissionsGetResponses];

export type CreatePermissionApiV1PermissionsPostData = {
    body: PermissionCreate;
    path?: never;
    query?: never;
    url: '/api/v1/permissions';
};

export type CreatePermissionApiV1PermissionsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreatePermissionApiV1PermissionsPostError = CreatePermissionApiV1PermissionsPostErrors[keyof CreatePermissionApiV1PermissionsPostErrors];

export type CreatePermissionApiV1PermissionsPostResponses = {
    /**
     * Successful Response
     */
    201: PermissionPublic;
};

export type CreatePermissionApiV1PermissionsPostResponse = CreatePermissionApiV1PermissionsPostResponses[keyof CreatePermissionApiV1PermissionsPostResponses];

export type ListPermissionsByModuleApiV1PermissionsByModuleGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Active Only
         *
         * Filter for active permissions only
         */
        active_only?: boolean;
    };
    url: '/api/v1/permissions/by-module';
};

export type ListPermissionsByModuleApiV1PermissionsByModuleGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListPermissionsByModuleApiV1PermissionsByModuleGetError = ListPermissionsByModuleApiV1PermissionsByModuleGetErrors[keyof ListPermissionsByModuleApiV1PermissionsByModuleGetErrors];

export type ListPermissionsByModuleApiV1PermissionsByModuleGetResponses = {
    /**
     * Response List Permissions By Module Api V1 Permissions By Module Get
     *
     * Successful Response
     */
    200: {
        [key: string]: Array<PermissionPublic>;
    };
};

export type ListPermissionsByModuleApiV1PermissionsByModuleGetResponse = ListPermissionsByModuleApiV1PermissionsByModuleGetResponses[keyof ListPermissionsByModuleApiV1PermissionsByModuleGetResponses];

export type ListClientsApiV1ClientsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Active Only
         *
         * Filter for active clients only
         */
        active_only?: boolean;
        /**
         * Client Type
         *
         * Filter by client type (Individual or Institutional)
         */
        client_type?: ClientType | null;
        /**
         * Search
         *
         * Search by name (case-insensitive partial match)
         */
        search?: string | null;
        /**
         * Limit
         *
         * Maximum number of results
         */
        limit?: number;
        /**
         * Offset
         *
         * Number of results to skip
         */
        offset?: number;
    };
    url: '/api/v1/clients';
};

export type ListClientsApiV1ClientsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListClientsApiV1ClientsGetError = ListClientsApiV1ClientsGetErrors[keyof ListClientsApiV1ClientsGetErrors];

export type ListClientsApiV1ClientsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedResponseClientPublic;
};

export type ListClientsApiV1ClientsGetResponse = ListClientsApiV1ClientsGetResponses[keyof ListClientsApiV1ClientsGetResponses];

export type CreateClientApiV1ClientsPostData = {
    body: ClientCreate;
    path?: never;
    query?: never;
    url: '/api/v1/clients';
};

export type CreateClientApiV1ClientsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateClientApiV1ClientsPostError = CreateClientApiV1ClientsPostErrors[keyof CreateClientApiV1ClientsPostErrors];

export type CreateClientApiV1ClientsPostResponses = {
    /**
     * Successful Response
     */
    201: ClientPublic;
};

export type CreateClientApiV1ClientsPostResponse = CreateClientApiV1ClientsPostResponses[keyof CreateClientApiV1ClientsPostResponses];

export type DeactivateClientApiV1ClientsClientIdDeleteData = {
    body?: never;
    path: {
        /**
         * Client Id
         */
        client_id: number;
    };
    query?: never;
    url: '/api/v1/clients/{client_id}';
};

export type DeactivateClientApiV1ClientsClientIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeactivateClientApiV1ClientsClientIdDeleteError = DeactivateClientApiV1ClientsClientIdDeleteErrors[keyof DeactivateClientApiV1ClientsClientIdDeleteErrors];

export type DeactivateClientApiV1ClientsClientIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: ClientPublic;
};

export type DeactivateClientApiV1ClientsClientIdDeleteResponse = DeactivateClientApiV1ClientsClientIdDeleteResponses[keyof DeactivateClientApiV1ClientsClientIdDeleteResponses];

export type GetClientApiV1ClientsClientIdGetData = {
    body?: never;
    path: {
        /**
         * Client Id
         */
        client_id: number;
    };
    query?: never;
    url: '/api/v1/clients/{client_id}';
};

export type GetClientApiV1ClientsClientIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClientApiV1ClientsClientIdGetError = GetClientApiV1ClientsClientIdGetErrors[keyof GetClientApiV1ClientsClientIdGetErrors];

export type GetClientApiV1ClientsClientIdGetResponses = {
    /**
     * Successful Response
     */
    200: ClientPublic;
};

export type GetClientApiV1ClientsClientIdGetResponse = GetClientApiV1ClientsClientIdGetResponses[keyof GetClientApiV1ClientsClientIdGetResponses];

export type UpdateClientApiV1ClientsClientIdPatchData = {
    body: ClientUpdate;
    path: {
        /**
         * Client Id
         */
        client_id: number;
    };
    query?: never;
    url: '/api/v1/clients/{client_id}';
};

export type UpdateClientApiV1ClientsClientIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateClientApiV1ClientsClientIdPatchError = UpdateClientApiV1ClientsClientIdPatchErrors[keyof UpdateClientApiV1ClientsClientIdPatchErrors];

export type UpdateClientApiV1ClientsClientIdPatchResponses = {
    /**
     * Successful Response
     */
    200: ClientPublic;
};

export type UpdateClientApiV1ClientsClientIdPatchResponse = UpdateClientApiV1ClientsClientIdPatchResponses[keyof UpdateClientApiV1ClientsClientIdPatchResponses];

export type ReactivateClientApiV1ClientsClientIdReactivatePutData = {
    body?: never;
    path: {
        /**
         * Client Id
         */
        client_id: number;
    };
    query?: never;
    url: '/api/v1/clients/{client_id}/reactivate';
};

export type ReactivateClientApiV1ClientsClientIdReactivatePutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReactivateClientApiV1ClientsClientIdReactivatePutError = ReactivateClientApiV1ClientsClientIdReactivatePutErrors[keyof ReactivateClientApiV1ClientsClientIdReactivatePutErrors];

export type ReactivateClientApiV1ClientsClientIdReactivatePutResponses = {
    /**
     * Successful Response
     */
    200: ClientPublic;
};

export type ReactivateClientApiV1ClientsClientIdReactivatePutResponse = ReactivateClientApiV1ClientsClientIdReactivatePutResponses[keyof ReactivateClientApiV1ClientsClientIdReactivatePutResponses];

export type ListItemsApiV1ItemsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Active Only
         *
         * Filter for active items only
         */
        active_only?: boolean;
        /**
         * Item Type
         *
         * Filter by item type (Photo, Video, Album, etc.)
         */
        item_type?: ItemType | null;
        /**
         * Limit
         *
         * Maximum number of results
         */
        limit?: number;
        /**
         * Offset
         *
         * Number of results to skip
         */
        offset?: number;
    };
    url: '/api/v1/items';
};

export type ListItemsApiV1ItemsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListItemsApiV1ItemsGetError = ListItemsApiV1ItemsGetErrors[keyof ListItemsApiV1ItemsGetErrors];

export type ListItemsApiV1ItemsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedResponseItemPublic;
};

export type ListItemsApiV1ItemsGetResponse = ListItemsApiV1ItemsGetResponses[keyof ListItemsApiV1ItemsGetResponses];

export type CreateItemApiV1ItemsPostData = {
    body: ItemCreate;
    path?: never;
    query?: never;
    url: '/api/v1/items';
};

export type CreateItemApiV1ItemsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateItemApiV1ItemsPostError = CreateItemApiV1ItemsPostErrors[keyof CreateItemApiV1ItemsPostErrors];

export type CreateItemApiV1ItemsPostResponses = {
    /**
     * Successful Response
     */
    201: ItemPublic;
};

export type CreateItemApiV1ItemsPostResponse = CreateItemApiV1ItemsPostResponses[keyof CreateItemApiV1ItemsPostResponses];

export type DeactivateItemApiV1ItemsItemIdDeleteData = {
    body?: never;
    path: {
        /**
         * Item Id
         */
        item_id: number;
    };
    query?: never;
    url: '/api/v1/items/{item_id}';
};

export type DeactivateItemApiV1ItemsItemIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeactivateItemApiV1ItemsItemIdDeleteError = DeactivateItemApiV1ItemsItemIdDeleteErrors[keyof DeactivateItemApiV1ItemsItemIdDeleteErrors];

export type DeactivateItemApiV1ItemsItemIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: ItemPublic;
};

export type DeactivateItemApiV1ItemsItemIdDeleteResponse = DeactivateItemApiV1ItemsItemIdDeleteResponses[keyof DeactivateItemApiV1ItemsItemIdDeleteResponses];

export type GetItemApiV1ItemsItemIdGetData = {
    body?: never;
    path: {
        /**
         * Item Id
         */
        item_id: number;
    };
    query?: never;
    url: '/api/v1/items/{item_id}';
};

export type GetItemApiV1ItemsItemIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetItemApiV1ItemsItemIdGetError = GetItemApiV1ItemsItemIdGetErrors[keyof GetItemApiV1ItemsItemIdGetErrors];

export type GetItemApiV1ItemsItemIdGetResponses = {
    /**
     * Successful Response
     */
    200: ItemPublic;
};

export type GetItemApiV1ItemsItemIdGetResponse = GetItemApiV1ItemsItemIdGetResponses[keyof GetItemApiV1ItemsItemIdGetResponses];

export type UpdateItemApiV1ItemsItemIdPatchData = {
    body: ItemUpdate;
    path: {
        /**
         * Item Id
         */
        item_id: number;
    };
    query?: never;
    url: '/api/v1/items/{item_id}';
};

export type UpdateItemApiV1ItemsItemIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateItemApiV1ItemsItemIdPatchError = UpdateItemApiV1ItemsItemIdPatchErrors[keyof UpdateItemApiV1ItemsItemIdPatchErrors];

export type UpdateItemApiV1ItemsItemIdPatchResponses = {
    /**
     * Successful Response
     */
    200: ItemPublic;
};

export type UpdateItemApiV1ItemsItemIdPatchResponse = UpdateItemApiV1ItemsItemIdPatchResponses[keyof UpdateItemApiV1ItemsItemIdPatchResponses];

export type ReactivateItemApiV1ItemsItemIdReactivatePutData = {
    body?: never;
    path: {
        /**
         * Item Id
         */
        item_id: number;
    };
    query?: never;
    url: '/api/v1/items/{item_id}/reactivate';
};

export type ReactivateItemApiV1ItemsItemIdReactivatePutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReactivateItemApiV1ItemsItemIdReactivatePutError = ReactivateItemApiV1ItemsItemIdReactivatePutErrors[keyof ReactivateItemApiV1ItemsItemIdReactivatePutErrors];

export type ReactivateItemApiV1ItemsItemIdReactivatePutResponses = {
    /**
     * Successful Response
     */
    200: ItemPublic;
};

export type ReactivateItemApiV1ItemsItemIdReactivatePutResponse = ReactivateItemApiV1ItemsItemIdReactivatePutResponses[keyof ReactivateItemApiV1ItemsItemIdReactivatePutResponses];

export type ListPackagesApiV1PackagesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Active Only
         *
         * Filter for active packages only
         */
        active_only?: boolean;
        /**
         * Session Type
         *
         * Filter by session type (Studio, External, Both)
         */
        session_type?: SessionType | null;
        /**
         * Limit
         *
         * Maximum number of results
         */
        limit?: number;
        /**
         * Offset
         *
         * Number of results to skip
         */
        offset?: number;
    };
    url: '/api/v1/packages';
};

export type ListPackagesApiV1PackagesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListPackagesApiV1PackagesGetError = ListPackagesApiV1PackagesGetErrors[keyof ListPackagesApiV1PackagesGetErrors];

export type ListPackagesApiV1PackagesGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedResponsePackagePublic;
};

export type ListPackagesApiV1PackagesGetResponse = ListPackagesApiV1PackagesGetResponses[keyof ListPackagesApiV1PackagesGetResponses];

export type CreatePackageApiV1PackagesPostData = {
    body: PackageCreate;
    path?: never;
    query?: never;
    url: '/api/v1/packages';
};

export type CreatePackageApiV1PackagesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreatePackageApiV1PackagesPostError = CreatePackageApiV1PackagesPostErrors[keyof CreatePackageApiV1PackagesPostErrors];

export type CreatePackageApiV1PackagesPostResponses = {
    /**
     * Successful Response
     */
    201: PackagePublic;
};

export type CreatePackageApiV1PackagesPostResponse = CreatePackageApiV1PackagesPostResponses[keyof CreatePackageApiV1PackagesPostResponses];

export type DeactivatePackageApiV1PackagesPackageIdDeleteData = {
    body?: never;
    path: {
        /**
         * Package Id
         */
        package_id: number;
    };
    query?: never;
    url: '/api/v1/packages/{package_id}';
};

export type DeactivatePackageApiV1PackagesPackageIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeactivatePackageApiV1PackagesPackageIdDeleteError = DeactivatePackageApiV1PackagesPackageIdDeleteErrors[keyof DeactivatePackageApiV1PackagesPackageIdDeleteErrors];

export type DeactivatePackageApiV1PackagesPackageIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: PackagePublic;
};

export type DeactivatePackageApiV1PackagesPackageIdDeleteResponse = DeactivatePackageApiV1PackagesPackageIdDeleteResponses[keyof DeactivatePackageApiV1PackagesPackageIdDeleteResponses];

export type GetPackageApiV1PackagesPackageIdGetData = {
    body?: never;
    path: {
        /**
         * Package Id
         */
        package_id: number;
    };
    query?: never;
    url: '/api/v1/packages/{package_id}';
};

export type GetPackageApiV1PackagesPackageIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetPackageApiV1PackagesPackageIdGetError = GetPackageApiV1PackagesPackageIdGetErrors[keyof GetPackageApiV1PackagesPackageIdGetErrors];

export type GetPackageApiV1PackagesPackageIdGetResponses = {
    /**
     * Successful Response
     */
    200: PackageDetail;
};

export type GetPackageApiV1PackagesPackageIdGetResponse = GetPackageApiV1PackagesPackageIdGetResponses[keyof GetPackageApiV1PackagesPackageIdGetResponses];

export type UpdatePackageApiV1PackagesPackageIdPatchData = {
    body: PackageUpdate;
    path: {
        /**
         * Package Id
         */
        package_id: number;
    };
    query?: never;
    url: '/api/v1/packages/{package_id}';
};

export type UpdatePackageApiV1PackagesPackageIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdatePackageApiV1PackagesPackageIdPatchError = UpdatePackageApiV1PackagesPackageIdPatchErrors[keyof UpdatePackageApiV1PackagesPackageIdPatchErrors];

export type UpdatePackageApiV1PackagesPackageIdPatchResponses = {
    /**
     * Successful Response
     */
    200: PackagePublic;
};

export type UpdatePackageApiV1PackagesPackageIdPatchResponse = UpdatePackageApiV1PackagesPackageIdPatchResponses[keyof UpdatePackageApiV1PackagesPackageIdPatchResponses];

export type ReactivatePackageApiV1PackagesPackageIdReactivatePutData = {
    body?: never;
    path: {
        /**
         * Package Id
         */
        package_id: number;
    };
    query?: never;
    url: '/api/v1/packages/{package_id}/reactivate';
};

export type ReactivatePackageApiV1PackagesPackageIdReactivatePutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReactivatePackageApiV1PackagesPackageIdReactivatePutError = ReactivatePackageApiV1PackagesPackageIdReactivatePutErrors[keyof ReactivatePackageApiV1PackagesPackageIdReactivatePutErrors];

export type ReactivatePackageApiV1PackagesPackageIdReactivatePutResponses = {
    /**
     * Successful Response
     */
    200: PackagePublic;
};

export type ReactivatePackageApiV1PackagesPackageIdReactivatePutResponse = ReactivatePackageApiV1PackagesPackageIdReactivatePutResponses[keyof ReactivatePackageApiV1PackagesPackageIdReactivatePutResponses];

export type GetPackageItemsApiV1PackagesPackageIdItemsGetData = {
    body?: never;
    path: {
        /**
         * Package Id
         */
        package_id: number;
    };
    query?: never;
    url: '/api/v1/packages/{package_id}/items';
};

export type GetPackageItemsApiV1PackagesPackageIdItemsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetPackageItemsApiV1PackagesPackageIdItemsGetError = GetPackageItemsApiV1PackagesPackageIdItemsGetErrors[keyof GetPackageItemsApiV1PackagesPackageIdItemsGetErrors];

export type GetPackageItemsApiV1PackagesPackageIdItemsGetResponses = {
    /**
     * Response Get Package Items Api V1 Packages  Package Id  Items Get
     *
     * Successful Response
     */
    200: Array<PackageItemDetail>;
};

export type GetPackageItemsApiV1PackagesPackageIdItemsGetResponse = GetPackageItemsApiV1PackagesPackageIdItemsGetResponses[keyof GetPackageItemsApiV1PackagesPackageIdItemsGetResponses];

export type AddItemToPackageApiV1PackagesPackageIdItemsPostData = {
    body: PackageItemCreate;
    path: {
        /**
         * Package Id
         */
        package_id: number;
    };
    query?: never;
    url: '/api/v1/packages/{package_id}/items';
};

export type AddItemToPackageApiV1PackagesPackageIdItemsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddItemToPackageApiV1PackagesPackageIdItemsPostError = AddItemToPackageApiV1PackagesPackageIdItemsPostErrors[keyof AddItemToPackageApiV1PackagesPackageIdItemsPostErrors];

export type AddItemToPackageApiV1PackagesPackageIdItemsPostResponses = {
    /**
     * Successful Response
     */
    201: PackageItemDetail;
};

export type AddItemToPackageApiV1PackagesPackageIdItemsPostResponse = AddItemToPackageApiV1PackagesPackageIdItemsPostResponses[keyof AddItemToPackageApiV1PackagesPackageIdItemsPostResponses];

export type RemoveItemFromPackageApiV1PackagesPackageIdItemsItemIdDeleteData = {
    body?: never;
    path: {
        /**
         * Package Id
         */
        package_id: number;
        /**
         * Item Id
         */
        item_id: number;
    };
    query?: never;
    url: '/api/v1/packages/{package_id}/items/{item_id}';
};

export type RemoveItemFromPackageApiV1PackagesPackageIdItemsItemIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveItemFromPackageApiV1PackagesPackageIdItemsItemIdDeleteError = RemoveItemFromPackageApiV1PackagesPackageIdItemsItemIdDeleteErrors[keyof RemoveItemFromPackageApiV1PackagesPackageIdItemsItemIdDeleteErrors];

export type RemoveItemFromPackageApiV1PackagesPackageIdItemsItemIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type RemoveItemFromPackageApiV1PackagesPackageIdItemsItemIdDeleteResponse = RemoveItemFromPackageApiV1PackagesPackageIdItemsItemIdDeleteResponses[keyof RemoveItemFromPackageApiV1PackagesPackageIdItemsItemIdDeleteResponses];

export type ListRoomsApiV1RoomsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Active Only
         *
         * Filter for active rooms only
         */
        active_only?: boolean;
        /**
         * Limit
         *
         * Maximum number of results
         */
        limit?: number;
        /**
         * Offset
         *
         * Number of results to skip
         */
        offset?: number;
    };
    url: '/api/v1/rooms';
};

export type ListRoomsApiV1RoomsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListRoomsApiV1RoomsGetError = ListRoomsApiV1RoomsGetErrors[keyof ListRoomsApiV1RoomsGetErrors];

export type ListRoomsApiV1RoomsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedResponseRoomPublic;
};

export type ListRoomsApiV1RoomsGetResponse = ListRoomsApiV1RoomsGetResponses[keyof ListRoomsApiV1RoomsGetResponses];

export type CreateRoomApiV1RoomsPostData = {
    body: RoomCreate;
    path?: never;
    query?: never;
    url: '/api/v1/rooms';
};

export type CreateRoomApiV1RoomsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateRoomApiV1RoomsPostError = CreateRoomApiV1RoomsPostErrors[keyof CreateRoomApiV1RoomsPostErrors];

export type CreateRoomApiV1RoomsPostResponses = {
    /**
     * Successful Response
     */
    201: RoomPublic;
};

export type CreateRoomApiV1RoomsPostResponse = CreateRoomApiV1RoomsPostResponses[keyof CreateRoomApiV1RoomsPostResponses];

export type DeactivateRoomApiV1RoomsRoomIdDeleteData = {
    body?: never;
    path: {
        /**
         * Room Id
         */
        room_id: number;
    };
    query?: never;
    url: '/api/v1/rooms/{room_id}';
};

export type DeactivateRoomApiV1RoomsRoomIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeactivateRoomApiV1RoomsRoomIdDeleteError = DeactivateRoomApiV1RoomsRoomIdDeleteErrors[keyof DeactivateRoomApiV1RoomsRoomIdDeleteErrors];

export type DeactivateRoomApiV1RoomsRoomIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: RoomPublic;
};

export type DeactivateRoomApiV1RoomsRoomIdDeleteResponse = DeactivateRoomApiV1RoomsRoomIdDeleteResponses[keyof DeactivateRoomApiV1RoomsRoomIdDeleteResponses];

export type GetRoomApiV1RoomsRoomIdGetData = {
    body?: never;
    path: {
        /**
         * Room Id
         */
        room_id: number;
    };
    query?: never;
    url: '/api/v1/rooms/{room_id}';
};

export type GetRoomApiV1RoomsRoomIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetRoomApiV1RoomsRoomIdGetError = GetRoomApiV1RoomsRoomIdGetErrors[keyof GetRoomApiV1RoomsRoomIdGetErrors];

export type GetRoomApiV1RoomsRoomIdGetResponses = {
    /**
     * Successful Response
     */
    200: RoomPublic;
};

export type GetRoomApiV1RoomsRoomIdGetResponse = GetRoomApiV1RoomsRoomIdGetResponses[keyof GetRoomApiV1RoomsRoomIdGetResponses];

export type UpdateRoomApiV1RoomsRoomIdPatchData = {
    body: RoomUpdate;
    path: {
        /**
         * Room Id
         */
        room_id: number;
    };
    query?: never;
    url: '/api/v1/rooms/{room_id}';
};

export type UpdateRoomApiV1RoomsRoomIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateRoomApiV1RoomsRoomIdPatchError = UpdateRoomApiV1RoomsRoomIdPatchErrors[keyof UpdateRoomApiV1RoomsRoomIdPatchErrors];

export type UpdateRoomApiV1RoomsRoomIdPatchResponses = {
    /**
     * Successful Response
     */
    200: RoomPublic;
};

export type UpdateRoomApiV1RoomsRoomIdPatchResponse = UpdateRoomApiV1RoomsRoomIdPatchResponses[keyof UpdateRoomApiV1RoomsRoomIdPatchResponses];

export type ReactivateRoomApiV1RoomsRoomIdReactivatePutData = {
    body?: never;
    path: {
        /**
         * Room Id
         */
        room_id: number;
    };
    query?: never;
    url: '/api/v1/rooms/{room_id}/reactivate';
};

export type ReactivateRoomApiV1RoomsRoomIdReactivatePutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReactivateRoomApiV1RoomsRoomIdReactivatePutError = ReactivateRoomApiV1RoomsRoomIdReactivatePutErrors[keyof ReactivateRoomApiV1RoomsRoomIdReactivatePutErrors];

export type ReactivateRoomApiV1RoomsRoomIdReactivatePutResponses = {
    /**
     * Successful Response
     */
    200: RoomPublic;
};

export type ReactivateRoomApiV1RoomsRoomIdReactivatePutResponse = ReactivateRoomApiV1RoomsRoomIdReactivatePutResponses[keyof ReactivateRoomApiV1RoomsRoomIdReactivatePutResponses];

export type SetRoomMaintenanceApiV1RoomsRoomIdMaintenancePutData = {
    body?: never;
    path: {
        /**
         * Room Id
         */
        room_id: number;
    };
    query?: never;
    url: '/api/v1/rooms/{room_id}/maintenance';
};

export type SetRoomMaintenanceApiV1RoomsRoomIdMaintenancePutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SetRoomMaintenanceApiV1RoomsRoomIdMaintenancePutError = SetRoomMaintenanceApiV1RoomsRoomIdMaintenancePutErrors[keyof SetRoomMaintenanceApiV1RoomsRoomIdMaintenancePutErrors];

export type SetRoomMaintenanceApiV1RoomsRoomIdMaintenancePutResponses = {
    /**
     * Successful Response
     */
    200: RoomPublic;
};

export type SetRoomMaintenanceApiV1RoomsRoomIdMaintenancePutResponse = SetRoomMaintenanceApiV1RoomsRoomIdMaintenancePutResponses[keyof SetRoomMaintenanceApiV1RoomsRoomIdMaintenancePutResponses];

export type ListSessionsApiV1SessionsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Client Id
         *
         * Filter by client ID
         */
        client_id?: number | null;
        /**
         * Status
         *
         * Filter by session status
         */
        status?: SessionStatus | null;
        /**
         * Start Date
         *
         * Filter by start date (inclusive)
         */
        start_date?: string | null;
        /**
         * End Date
         *
         * Filter by end date (inclusive)
         */
        end_date?: string | null;
        /**
         * Photographer Id
         *
         * Filter by assigned photographer
         */
        photographer_id?: number | null;
        /**
         * Editor Id
         *
         * Filter by assigned editor
         */
        editor_id?: number | null;
        /**
         * Limit
         *
         * Maximum number of results
         */
        limit?: number;
        /**
         * Offset
         *
         * Number of results to skip
         */
        offset?: number;
    };
    url: '/api/v1/sessions';
};

export type ListSessionsApiV1SessionsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListSessionsApiV1SessionsGetError = ListSessionsApiV1SessionsGetErrors[keyof ListSessionsApiV1SessionsGetErrors];

export type ListSessionsApiV1SessionsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedResponseSessionPublic;
};

export type ListSessionsApiV1SessionsGetResponse = ListSessionsApiV1SessionsGetResponses[keyof ListSessionsApiV1SessionsGetResponses];

export type CreateSessionApiV1SessionsPostData = {
    body: SessionCreate;
    path?: never;
    query?: never;
    url: '/api/v1/sessions';
};

export type CreateSessionApiV1SessionsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateSessionApiV1SessionsPostError = CreateSessionApiV1SessionsPostErrors[keyof CreateSessionApiV1SessionsPostErrors];

export type CreateSessionApiV1SessionsPostResponses = {
    /**
     * Successful Response
     */
    201: SessionPublic;
};

export type CreateSessionApiV1SessionsPostResponse = CreateSessionApiV1SessionsPostResponses[keyof CreateSessionApiV1SessionsPostResponses];

export type ListMyAssignmentsApiV1SessionsMyAssignmentsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Status
         *
         * Filter by session status
         */
        status?: SessionStatus | null;
        /**
         * Start Date
         *
         * Filter by start date (inclusive)
         */
        start_date?: string | null;
        /**
         * End Date
         *
         * Filter by end date (inclusive)
         */
        end_date?: string | null;
        /**
         * Limit
         *
         * Maximum number of results
         */
        limit?: number;
        /**
         * Offset
         *
         * Number of results to skip
         */
        offset?: number;
    };
    url: '/api/v1/sessions/my-assignments';
};

export type ListMyAssignmentsApiV1SessionsMyAssignmentsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListMyAssignmentsApiV1SessionsMyAssignmentsGetError = ListMyAssignmentsApiV1SessionsMyAssignmentsGetErrors[keyof ListMyAssignmentsApiV1SessionsMyAssignmentsGetErrors];

export type ListMyAssignmentsApiV1SessionsMyAssignmentsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedResponseSessionPublic;
};

export type ListMyAssignmentsApiV1SessionsMyAssignmentsGetResponse = ListMyAssignmentsApiV1SessionsMyAssignmentsGetResponses[keyof ListMyAssignmentsApiV1SessionsMyAssignmentsGetResponses];

export type ListMyEditingApiV1SessionsMyEditingGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Status
         *
         * Filter by session status
         */
        status?: SessionStatus | null;
        /**
         * Start Date
         *
         * Filter by start date (inclusive)
         */
        start_date?: string | null;
        /**
         * End Date
         *
         * Filter by end date (inclusive)
         */
        end_date?: string | null;
        /**
         * Limit
         *
         * Maximum number of results
         */
        limit?: number;
        /**
         * Offset
         *
         * Number of results to skip
         */
        offset?: number;
    };
    url: '/api/v1/sessions/my-editing';
};

export type ListMyEditingApiV1SessionsMyEditingGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListMyEditingApiV1SessionsMyEditingGetError = ListMyEditingApiV1SessionsMyEditingGetErrors[keyof ListMyEditingApiV1SessionsMyEditingGetErrors];

export type ListMyEditingApiV1SessionsMyEditingGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedResponseSessionPublic;
};

export type ListMyEditingApiV1SessionsMyEditingGetResponse = ListMyEditingApiV1SessionsMyEditingGetResponses[keyof ListMyEditingApiV1SessionsMyEditingGetResponses];

export type GetSessionApiV1SessionsSessionIdGetData = {
    body?: never;
    path: {
        /**
         * Session Id
         */
        session_id: number;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}';
};

export type GetSessionApiV1SessionsSessionIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSessionApiV1SessionsSessionIdGetError = GetSessionApiV1SessionsSessionIdGetErrors[keyof GetSessionApiV1SessionsSessionIdGetErrors];

export type GetSessionApiV1SessionsSessionIdGetResponses = {
    /**
     * Successful Response
     */
    200: SessionDetail;
};

export type GetSessionApiV1SessionsSessionIdGetResponse = GetSessionApiV1SessionsSessionIdGetResponses[keyof GetSessionApiV1SessionsSessionIdGetResponses];

export type UpdateSessionApiV1SessionsSessionIdPatchData = {
    body: SessionUpdate;
    path: {
        /**
         * Session Id
         */
        session_id: number;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}';
};

export type UpdateSessionApiV1SessionsSessionIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateSessionApiV1SessionsSessionIdPatchError = UpdateSessionApiV1SessionsSessionIdPatchErrors[keyof UpdateSessionApiV1SessionsSessionIdPatchErrors];

export type UpdateSessionApiV1SessionsSessionIdPatchResponses = {
    /**
     * Successful Response
     */
    200: SessionPublic;
};

export type UpdateSessionApiV1SessionsSessionIdPatchResponse = UpdateSessionApiV1SessionsSessionIdPatchResponses[keyof UpdateSessionApiV1SessionsSessionIdPatchResponses];

export type TransitionStatusApiV1SessionsSessionIdTransitionPostData = {
    body: SessionStatusTransition;
    path: {
        /**
         * Session Id
         */
        session_id: number;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}/transition';
};

export type TransitionStatusApiV1SessionsSessionIdTransitionPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TransitionStatusApiV1SessionsSessionIdTransitionPostError = TransitionStatusApiV1SessionsSessionIdTransitionPostErrors[keyof TransitionStatusApiV1SessionsSessionIdTransitionPostErrors];

export type TransitionStatusApiV1SessionsSessionIdTransitionPostResponses = {
    /**
     * Successful Response
     */
    200: SessionPublic;
};

export type TransitionStatusApiV1SessionsSessionIdTransitionPostResponse = TransitionStatusApiV1SessionsSessionIdTransitionPostResponses[keyof TransitionStatusApiV1SessionsSessionIdTransitionPostResponses];

export type CancelSessionApiV1SessionsSessionIdCancelPostData = {
    body: SessionCancellation;
    path: {
        /**
         * Session Id
         */
        session_id: number;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}/cancel';
};

export type CancelSessionApiV1SessionsSessionIdCancelPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CancelSessionApiV1SessionsSessionIdCancelPostError = CancelSessionApiV1SessionsSessionIdCancelPostErrors[keyof CancelSessionApiV1SessionsSessionIdCancelPostErrors];

export type CancelSessionApiV1SessionsSessionIdCancelPostResponses = {
    /**
     * Successful Response
     */
    200: SessionDetail;
};

export type CancelSessionApiV1SessionsSessionIdCancelPostResponse = CancelSessionApiV1SessionsSessionIdCancelPostResponses[keyof CancelSessionApiV1SessionsSessionIdCancelPostResponses];

export type MarkSessionReadyApiV1SessionsSessionIdMarkReadyPostData = {
    body: SessionMarkReady;
    path: {
        /**
         * Session Id
         */
        session_id: number;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}/mark-ready';
};

export type MarkSessionReadyApiV1SessionsSessionIdMarkReadyPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type MarkSessionReadyApiV1SessionsSessionIdMarkReadyPostError = MarkSessionReadyApiV1SessionsSessionIdMarkReadyPostErrors[keyof MarkSessionReadyApiV1SessionsSessionIdMarkReadyPostErrors];

export type MarkSessionReadyApiV1SessionsSessionIdMarkReadyPostResponses = {
    /**
     * Successful Response
     */
    200: SessionPublic;
};

export type MarkSessionReadyApiV1SessionsSessionIdMarkReadyPostResponse = MarkSessionReadyApiV1SessionsSessionIdMarkReadyPostResponses[keyof MarkSessionReadyApiV1SessionsSessionIdMarkReadyPostResponses];

export type AssignEditorToSessionApiV1SessionsSessionIdAssignEditorPostData = {
    body: SessionEditorAssignment;
    path: {
        /**
         * Session Id
         */
        session_id: number;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}/assign-editor';
};

export type AssignEditorToSessionApiV1SessionsSessionIdAssignEditorPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AssignEditorToSessionApiV1SessionsSessionIdAssignEditorPostError = AssignEditorToSessionApiV1SessionsSessionIdAssignEditorPostErrors[keyof AssignEditorToSessionApiV1SessionsSessionIdAssignEditorPostErrors];

export type AssignEditorToSessionApiV1SessionsSessionIdAssignEditorPostResponses = {
    /**
     * Successful Response
     */
    200: SessionPublic;
};

export type AssignEditorToSessionApiV1SessionsSessionIdAssignEditorPostResponse = AssignEditorToSessionApiV1SessionsSessionIdAssignEditorPostResponses[keyof AssignEditorToSessionApiV1SessionsSessionIdAssignEditorPostResponses];

export type AddItemToSessionApiV1SessionsSessionIdDetailsItemsItemIdPostData = {
    body?: never;
    path: {
        /**
         * Session Id
         */
        session_id: number;
        /**
         * Item Id
         */
        item_id: number;
    };
    query?: {
        /**
         * Quantity
         *
         * Quantity of item
         */
        quantity?: number;
    };
    url: '/api/v1/sessions/{session_id}/details/items/{item_id}';
};

export type AddItemToSessionApiV1SessionsSessionIdDetailsItemsItemIdPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddItemToSessionApiV1SessionsSessionIdDetailsItemsItemIdPostError = AddItemToSessionApiV1SessionsSessionIdDetailsItemsItemIdPostErrors[keyof AddItemToSessionApiV1SessionsSessionIdDetailsItemsItemIdPostErrors];

export type AddItemToSessionApiV1SessionsSessionIdDetailsItemsItemIdPostResponses = {
    /**
     * Successful Response
     */
    201: SessionDetailPublic;
};

export type AddItemToSessionApiV1SessionsSessionIdDetailsItemsItemIdPostResponse = AddItemToSessionApiV1SessionsSessionIdDetailsItemsItemIdPostResponses[keyof AddItemToSessionApiV1SessionsSessionIdDetailsItemsItemIdPostResponses];

export type AddPackageToSessionApiV1SessionsSessionIdDetailsPackagesPackageIdPostData = {
    body?: never;
    path: {
        /**
         * Session Id
         */
        session_id: number;
        /**
         * Package Id
         */
        package_id: number;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}/details/packages/{package_id}';
};

export type AddPackageToSessionApiV1SessionsSessionIdDetailsPackagesPackageIdPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddPackageToSessionApiV1SessionsSessionIdDetailsPackagesPackageIdPostError = AddPackageToSessionApiV1SessionsSessionIdDetailsPackagesPackageIdPostErrors[keyof AddPackageToSessionApiV1SessionsSessionIdDetailsPackagesPackageIdPostErrors];

export type AddPackageToSessionApiV1SessionsSessionIdDetailsPackagesPackageIdPostResponses = {
    /**
     * Response Add Package To Session Api V1 Sessions  Session Id  Details Packages  Package Id  Post
     *
     * Successful Response
     */
    201: Array<SessionDetailPublic>;
};

export type AddPackageToSessionApiV1SessionsSessionIdDetailsPackagesPackageIdPostResponse = AddPackageToSessionApiV1SessionsSessionIdDetailsPackagesPackageIdPostResponses[keyof AddPackageToSessionApiV1SessionsSessionIdDetailsPackagesPackageIdPostResponses];

export type ListSessionDetailsApiV1SessionsSessionIdDetailsGetData = {
    body?: never;
    path: {
        /**
         * Session Id
         */
        session_id: number;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}/details';
};

export type ListSessionDetailsApiV1SessionsSessionIdDetailsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListSessionDetailsApiV1SessionsSessionIdDetailsGetError = ListSessionDetailsApiV1SessionsSessionIdDetailsGetErrors[keyof ListSessionDetailsApiV1SessionsSessionIdDetailsGetErrors];

export type ListSessionDetailsApiV1SessionsSessionIdDetailsGetResponses = {
    /**
     * Response List Session Details Api V1 Sessions  Session Id  Details Get
     *
     * Successful Response
     */
    200: Array<SessionDetailPublic>;
};

export type ListSessionDetailsApiV1SessionsSessionIdDetailsGetResponse = ListSessionDetailsApiV1SessionsSessionIdDetailsGetResponses[keyof ListSessionDetailsApiV1SessionsSessionIdDetailsGetResponses];

export type RemoveSessionDetailApiV1SessionsSessionIdDetailsDetailIdDeleteData = {
    body?: never;
    path: {
        /**
         * Session Id
         */
        session_id: number;
        /**
         * Detail Id
         */
        detail_id: number;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}/details/{detail_id}';
};

export type RemoveSessionDetailApiV1SessionsSessionIdDetailsDetailIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveSessionDetailApiV1SessionsSessionIdDetailsDetailIdDeleteError = RemoveSessionDetailApiV1SessionsSessionIdDetailsDetailIdDeleteErrors[keyof RemoveSessionDetailApiV1SessionsSessionIdDetailsDetailIdDeleteErrors];

export type RemoveSessionDetailApiV1SessionsSessionIdDetailsDetailIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type RemoveSessionDetailApiV1SessionsSessionIdDetailsDetailIdDeleteResponse = RemoveSessionDetailApiV1SessionsSessionIdDetailsDetailIdDeleteResponses[keyof RemoveSessionDetailApiV1SessionsSessionIdDetailsDetailIdDeleteResponses];

export type RecalculateSessionTotalsApiV1SessionsSessionIdRecalculatePostData = {
    body?: never;
    path: {
        /**
         * Session Id
         */
        session_id: number;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}/recalculate';
};

export type RecalculateSessionTotalsApiV1SessionsSessionIdRecalculatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RecalculateSessionTotalsApiV1SessionsSessionIdRecalculatePostError = RecalculateSessionTotalsApiV1SessionsSessionIdRecalculatePostErrors[keyof RecalculateSessionTotalsApiV1SessionsSessionIdRecalculatePostErrors];

export type RecalculateSessionTotalsApiV1SessionsSessionIdRecalculatePostResponses = {
    /**
     * Successful Response
     */
    200: SessionPublic;
};

export type RecalculateSessionTotalsApiV1SessionsSessionIdRecalculatePostResponse = RecalculateSessionTotalsApiV1SessionsSessionIdRecalculatePostResponses[keyof RecalculateSessionTotalsApiV1SessionsSessionIdRecalculatePostResponses];

export type ListSessionPaymentsApiV1SessionsSessionIdPaymentsGetData = {
    body?: never;
    path: {
        /**
         * Session Id
         */
        session_id: number;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}/payments';
};

export type ListSessionPaymentsApiV1SessionsSessionIdPaymentsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListSessionPaymentsApiV1SessionsSessionIdPaymentsGetError = ListSessionPaymentsApiV1SessionsSessionIdPaymentsGetErrors[keyof ListSessionPaymentsApiV1SessionsSessionIdPaymentsGetErrors];

export type ListSessionPaymentsApiV1SessionsSessionIdPaymentsGetResponses = {
    /**
     * Response List Session Payments Api V1 Sessions  Session Id  Payments Get
     *
     * Successful Response
     */
    200: Array<SessionPaymentPublic>;
};

export type ListSessionPaymentsApiV1SessionsSessionIdPaymentsGetResponse = ListSessionPaymentsApiV1SessionsSessionIdPaymentsGetResponses[keyof ListSessionPaymentsApiV1SessionsSessionIdPaymentsGetResponses];

export type RecordPaymentApiV1SessionsSessionIdPaymentsPostData = {
    body: SessionPaymentCreate;
    path: {
        /**
         * Session Id
         */
        session_id: number;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}/payments';
};

export type RecordPaymentApiV1SessionsSessionIdPaymentsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RecordPaymentApiV1SessionsSessionIdPaymentsPostError = RecordPaymentApiV1SessionsSessionIdPaymentsPostErrors[keyof RecordPaymentApiV1SessionsSessionIdPaymentsPostErrors];

export type RecordPaymentApiV1SessionsSessionIdPaymentsPostResponses = {
    /**
     * Successful Response
     */
    201: SessionPaymentPublic;
};

export type RecordPaymentApiV1SessionsSessionIdPaymentsPostResponse = RecordPaymentApiV1SessionsSessionIdPaymentsPostResponses[keyof RecordPaymentApiV1SessionsSessionIdPaymentsPostResponses];

export type ListSessionPhotographersApiV1SessionsSessionIdPhotographersGetData = {
    body?: never;
    path: {
        /**
         * Session Id
         */
        session_id: number;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}/photographers';
};

export type ListSessionPhotographersApiV1SessionsSessionIdPhotographersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListSessionPhotographersApiV1SessionsSessionIdPhotographersGetError = ListSessionPhotographersApiV1SessionsSessionIdPhotographersGetErrors[keyof ListSessionPhotographersApiV1SessionsSessionIdPhotographersGetErrors];

export type ListSessionPhotographersApiV1SessionsSessionIdPhotographersGetResponses = {
    /**
     * Response List Session Photographers Api V1 Sessions  Session Id  Photographers Get
     *
     * Successful Response
     */
    200: Array<SessionPhotographerPublic>;
};

export type ListSessionPhotographersApiV1SessionsSessionIdPhotographersGetResponse = ListSessionPhotographersApiV1SessionsSessionIdPhotographersGetResponses[keyof ListSessionPhotographersApiV1SessionsSessionIdPhotographersGetResponses];

export type AssignPhotographerApiV1SessionsSessionIdPhotographersPostData = {
    body: SessionPhotographerAssign;
    path: {
        /**
         * Session Id
         */
        session_id: number;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}/photographers';
};

export type AssignPhotographerApiV1SessionsSessionIdPhotographersPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AssignPhotographerApiV1SessionsSessionIdPhotographersPostError = AssignPhotographerApiV1SessionsSessionIdPhotographersPostErrors[keyof AssignPhotographerApiV1SessionsSessionIdPhotographersPostErrors];

export type AssignPhotographerApiV1SessionsSessionIdPhotographersPostResponses = {
    /**
     * Successful Response
     */
    201: SessionPhotographerPublic;
};

export type AssignPhotographerApiV1SessionsSessionIdPhotographersPostResponse = AssignPhotographerApiV1SessionsSessionIdPhotographersPostResponses[keyof AssignPhotographerApiV1SessionsSessionIdPhotographersPostResponses];

export type MarkPhotographerAttendedApiV1SessionsSessionIdPhotographersAssignmentIdAttendedPatchData = {
    body: SessionPhotographerUpdate;
    path: {
        /**
         * Session Id
         */
        session_id: number;
        /**
         * Assignment Id
         */
        assignment_id: number;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}/photographers/{assignment_id}/attended';
};

export type MarkPhotographerAttendedApiV1SessionsSessionIdPhotographersAssignmentIdAttendedPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type MarkPhotographerAttendedApiV1SessionsSessionIdPhotographersAssignmentIdAttendedPatchError = MarkPhotographerAttendedApiV1SessionsSessionIdPhotographersAssignmentIdAttendedPatchErrors[keyof MarkPhotographerAttendedApiV1SessionsSessionIdPhotographersAssignmentIdAttendedPatchErrors];

export type MarkPhotographerAttendedApiV1SessionsSessionIdPhotographersAssignmentIdAttendedPatchResponses = {
    /**
     * Successful Response
     */
    200: SessionPhotographerPublic;
};

export type MarkPhotographerAttendedApiV1SessionsSessionIdPhotographersAssignmentIdAttendedPatchResponse = MarkPhotographerAttendedApiV1SessionsSessionIdPhotographersAssignmentIdAttendedPatchResponses[keyof MarkPhotographerAttendedApiV1SessionsSessionIdPhotographersAssignmentIdAttendedPatchResponses];

export type MarkMyAttendanceApiV1SessionsSessionIdMyAttendancePatchData = {
    body: SessionPhotographerUpdate;
    path: {
        /**
         * Session Id
         */
        session_id: number;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}/my-attendance';
};

export type MarkMyAttendanceApiV1SessionsSessionIdMyAttendancePatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type MarkMyAttendanceApiV1SessionsSessionIdMyAttendancePatchError = MarkMyAttendanceApiV1SessionsSessionIdMyAttendancePatchErrors[keyof MarkMyAttendanceApiV1SessionsSessionIdMyAttendancePatchErrors];

export type MarkMyAttendanceApiV1SessionsSessionIdMyAttendancePatchResponses = {
    /**
     * Successful Response
     */
    200: SessionPhotographerPublic;
};

export type MarkMyAttendanceApiV1SessionsSessionIdMyAttendancePatchResponse = MarkMyAttendanceApiV1SessionsSessionIdMyAttendancePatchResponses[keyof MarkMyAttendanceApiV1SessionsSessionIdMyAttendancePatchResponses];

export type RemovePhotographerAssignmentApiV1SessionsSessionIdPhotographersAssignmentIdDeleteData = {
    body?: never;
    path: {
        /**
         * Session Id
         */
        session_id: number;
        /**
         * Assignment Id
         */
        assignment_id: number;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}/photographers/{assignment_id}';
};

export type RemovePhotographerAssignmentApiV1SessionsSessionIdPhotographersAssignmentIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemovePhotographerAssignmentApiV1SessionsSessionIdPhotographersAssignmentIdDeleteError = RemovePhotographerAssignmentApiV1SessionsSessionIdPhotographersAssignmentIdDeleteErrors[keyof RemovePhotographerAssignmentApiV1SessionsSessionIdPhotographersAssignmentIdDeleteErrors];

export type RemovePhotographerAssignmentApiV1SessionsSessionIdPhotographersAssignmentIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type RemovePhotographerAssignmentApiV1SessionsSessionIdPhotographersAssignmentIdDeleteResponse = RemovePhotographerAssignmentApiV1SessionsSessionIdPhotographersAssignmentIdDeleteResponses[keyof RemovePhotographerAssignmentApiV1SessionsSessionIdPhotographersAssignmentIdDeleteResponses];

export type GetSessionStatusHistoryApiV1SessionsSessionIdHistoryGetData = {
    body?: never;
    path: {
        /**
         * Session Id
         */
        session_id: number;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}/history';
};

export type GetSessionStatusHistoryApiV1SessionsSessionIdHistoryGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSessionStatusHistoryApiV1SessionsSessionIdHistoryGetError = GetSessionStatusHistoryApiV1SessionsSessionIdHistoryGetErrors[keyof GetSessionStatusHistoryApiV1SessionsSessionIdHistoryGetErrors];

export type GetSessionStatusHistoryApiV1SessionsSessionIdHistoryGetResponses = {
    /**
     * Response Get Session Status History Api V1 Sessions  Session Id  History Get
     *
     * Successful Response
     */
    200: Array<SessionStatusHistoryPublic>;
};

export type GetSessionStatusHistoryApiV1SessionsSessionIdHistoryGetResponse = GetSessionStatusHistoryApiV1SessionsSessionIdHistoryGetResponses[keyof GetSessionStatusHistoryApiV1SessionsSessionIdHistoryGetResponses];

export type GetDashboardStatsApiV1DashboardStatsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Year
         *
         * Year to filter (default: current year)
         */
        year?: number | null;
        /**
         * Month
         *
         * Month to filter 1-12 (default: current month)
         */
        month?: number | null;
    };
    url: '/api/v1/dashboard/stats';
};

export type GetDashboardStatsApiV1DashboardStatsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetDashboardStatsApiV1DashboardStatsGetError = GetDashboardStatsApiV1DashboardStatsGetErrors[keyof GetDashboardStatsApiV1DashboardStatsGetErrors];

export type GetDashboardStatsApiV1DashboardStatsGetResponses = {
    /**
     * Successful Response
     */
    200: DashboardStats;
};

export type GetDashboardStatsApiV1DashboardStatsGetResponse = GetDashboardStatsApiV1DashboardStatsGetResponses[keyof GetDashboardStatsApiV1DashboardStatsGetResponses];
